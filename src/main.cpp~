#include "main.h"

Main::Main(int argc, char**argv):min_y_(0.1),max_y_(0.5),min_x_(-0.35),max_x_(0.35),max_z_(5)
{
	pub1 = n.advertise<geometry_msgs::Twist>("/cmd_vel_mux/input/teleop", 1000, true);
	sub1 = n.subscribe<pcl::PointCloud<pcl::PointXYZ> >("camera/depth/points", 1000, &Main::cloudCB, this);
	//backward_flag = false;
}

Main::~Main()
{
}

void Main::cloudCB(const pcl::PointCloud<pcl::PointXYZ>::ConstPtr & cloud)
{
    ROS_INFO("cloudCB start!");
    float x = 0.0;//X of the centroid
    float y = 0.0;//Y of the centroid
    float z = 1e6;//Z of the centroid
    unsigned int n = 0;//Number of points ovserved
    bool direction = 0;
    double rand_angular;
	geometry_msgs::Twist cmd;
	BOOST_FOREACH (const pcl::PointXYZ & pt, cloud->points)
    {
      	if (!std::isnan(x) && !std::isnan(y) && !std::isnan(z))
      	{
        	//Test to ensure the point is within the aceptable box.
       		if (-pt.y > min_y_ && -pt.y < max_y_ && pt.x < max_x_ && pt.x > min_x_ && pt.z < max_z_)
        	{
          		//Add the point to the totals
          		x += pt.x;
          		y += pt.y;
          		//z = std::min(z, pt.z);
          		n++;
        	}
      	}
    }
	//if some obstacle is detected ahead, turn accordingly, 
	//else, simply publish a forward command.
	if (n > 4000)
	{
		x /= n;
    	y /= n;
		ROS_INFO("Obstacle ahead detected, turn!");
		cmd.linear.x = 0.2;
		if(x > 0.2 )
		{
			direction = 1;
            srand((unsigned)time(NULL));
			rand_angular = rand()%7;
			rand_angular = rand_angular/7.0;
			ROS_INFO(" x > 0.2  , rand_angular %f ", rand_angular);
			if(rand_angular > 0.7 && rand_angular <= 1.0 )
			{
				cmd.angular.z = 0.4;
                ROS_INFO("rand_angular = 0.7~1.0, cmd->angular.z = %f ", cmd.angular.z );
			}
			else if(rand_angular > 0.4 && rand_angular  <= 0.7)
			{
				cmd.angular.z = rand_angular;
                ROS_INFO("rand_angular = 0.4~0.7, cmd->angular.z = %f ", cmd.angular.z );
			}
			else
			{
				cmd.angular.z = 0.3;
                ROS_INFO("rand_angular = 0.0~0.4, cmd->angular.z = %f ", cmd.angular.z );
			}
		}
		else if(x <- 0.2)
		{
			direction = 0;
            srand((unsigned)time(NULL));
			rand_angular = rand()%7;
			rand_angular = double(rand_angular)/7.0 - 1.0;
			ROS_INFO(" x < -0.2  , rand_angular %f ", rand_angular);
			if(rand_angular >= -1.0 && rand_angular < -0.7 )
			{
				cmd.angular.z = -0.36;
                ROS_INFO("rand_angular = -1.0~-0.7, cmd->angular.z = %f ", cmd.angular.z );
			}
			else if(rand_angular >= -0.7 && rand_angular  < -0.5)
			{
				cmd.angular.z = rand_angular;
                ROS_INFO("rand_angular = -0.7~-0.4, cmd->angular.z = %f ", cmd.angular.z );
			}
			else 
			{
				cmd.angular.z = - 0.2;
                ROS_INFO("rand_angular = -0.4~-0.0, cmd->angular.z = %f ", cmd.angular.z );
			}
						
		}
		else
		{
			if(direction)
			{
				cmd.angular.z = 0.3;
			}
			else
			{
				cmd.angular.z = -0.3;
			}
		}
		pub1.publish(cmd);
	}
	else
	{
		cmd.linear.x = 0.2;
		cmd.angular.z = 0;
		pub1.publish(cmd);
	}
}
